package dev.virtualpatch.legitinstaller;

import androidx.appcompat.app.AppCompatActivity;

import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentSender;
import android.content.pm.PackageInstaller;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "EXPLOIT";
    public static final String ACTION_INSTALL_COMPLETE = "dev.virtualpatch.installer.INSTALL_COMPLETE";
    private Button install;

    private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            if (ACTION_INSTALL_COMPLETE.equals(action)) {
                int result = intent.getIntExtra(PackageInstaller.EXTRA_STATUS,
                        PackageInstaller.STATUS_FAILURE);
                String packageName = intent.getStringExtra(PackageInstaller.EXTRA_PACKAGE_NAME);
                Log.wtf(TAG, "PackageInstallerCallback: result= " + result + ", packageName = " + packageName);
                switch (result) {
                    case PackageInstaller.STATUS_PENDING_USER_ACTION: {
                        // this should not happen in M, but will happen in L and L-MR1
                        startActivity((Intent) intent.getParcelableExtra(Intent.EXTRA_INTENT));
                    }
                    break;
                    case PackageInstaller.STATUS_SUCCESS: {
                        Log.wtf(TAG, "Package " + packageName + " installation complete");
                    }
                    break;
                    default: {
                        Log.wtf(TAG, "Install failed.");
                        return;
                    }
                }
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(ACTION_INSTALL_COMPLETE);
        registerReceiver(mIntentReceiver, intentFilter);

        install = findViewById(R.id.install);
    }

    @Override
    protected void onStart() {
        super.onStart();
        String packageName = "com.example.fagiolotimer";
        Log.wtf(TAG, "Application " + packageName + " installation started");
        PackageInstaller packageInstaller = this.getPackageManager().getPackageInstaller();
        PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(
                PackageInstaller.SessionParams.MODE_FULL_INSTALL);
        params.setAppPackageName(packageName);
        // set params
        int sessionId = 0;
        try {
            sessionId = packageInstaller.createSession(params);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Log.wtf(TAG, String.valueOf(sessionId));
        EditText tv = findViewById(R.id.textView);
        tv.setText(String.valueOf(sessionId));

        int finalSessionId = sessionId;
        install.setOnClickListener((view -> {
            InputStream inputStream = null;
            try {
                inputStream = getAssets().open("fagiolotimer.apk");
                if (inputStream != null)
                    installPackage(this, packageInstaller, finalSessionId, inputStream, "com.example.fagiolotimer");
            } catch (Throwable e) {
                e.printStackTrace();
            }
        }));
    }

    public boolean installPackage(Context context, PackageInstaller packageInstaller, int sessionId, InputStream in, String packageName) throws Throwable {
        PackageInstaller.Session session = packageInstaller.openSession(sessionId);
        OutputStream out = session.openWrite("COSU", 0, -1);
        byte[] buffer = new byte[65536];
        int c;
        while ((c = in.read(buffer)) != -1) {
            out.write(buffer, 0, c);
        }
        session.fsync(out);
        in.close();
        out.close();
        Log.wtf(TAG, "Application " + packageName + " installation completed");
        session.commit(createIntentSender(context, sessionId));
        return true;
    }

    private static IntentSender createIntentSender(Context context, int sessionId) {
        PendingIntent pendingIntent = PendingIntent.getBroadcast(
                context,
                sessionId,
                new Intent(ACTION_INSTALL_COMPLETE),
                0);
        return pendingIntent.getIntentSender();
    }
}